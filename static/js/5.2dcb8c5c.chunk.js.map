{"version":3,"file":"static/js/5.2dcb8c5c.chunk.js","mappings":"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","sources":["Home/Home.jsx","../node_modules/react-use-cart/src/useLocalStorage.ts","../node_modules/react-use-cart/src/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { CartProvider } from \"react-use-cart\";\r\nconst Router = React.lazy(() => import(\"../Router/Router\"));\r\n\r\nexport default function Home  ()  {\r\n  return (\r\n    <div>\r\n      \r\n      <CartProvider>\r\n        <Router />\r\n      </CartProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import * as React from \"react\";\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string\n): [string, (value: Function | string) => void] {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key);\n\n      return item ? item : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: Function | string) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, valueToStore);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import * as React from \"react\";\n\nimport useLocalStorage from \"./useLocalStorage\";\n\nexport interface Item {\n  id: string;\n  price: number;\n  quantity?: number;\n  itemTotal?: number;\n  [key: string]: any;\n}\n\ninterface InitialState {\n  id: string;\n  items: Item[];\n  isEmpty: boolean;\n  totalItems: number;\n  totalUniqueItems: number;\n  cartTotal: number;\n  metadata?: Metadata;\n}\n\nexport interface Metadata {\n  [key: string]: any;\n}\n\ninterface CartProviderState extends InitialState {\n  addItem: (item: Item, quantity?: number) => void;\n  removeItem: (id: Item[\"id\"]) => void;\n  updateItem: (id: Item[\"id\"], payload: object) => void;\n  setItems: (items: Item[]) => void;\n  updateItemQuantity: (id: Item[\"id\"], quantity: number) => void;\n  emptyCart: () => void;\n  getItem: (id: Item[\"id\"]) => any | undefined;\n  inCart: (id: Item[\"id\"]) => boolean;\n  clearCartMetadata: () => void;\n  setCartMetadata: (metadata: Metadata) => void;\n  updateCartMetadata: (metadata: Metadata) => void;\n}\n\nexport type Actions =\n  | { type: \"SET_ITEMS\"; payload: Item[] }\n  | { type: \"ADD_ITEM\"; payload: Item }\n  | { type: \"REMOVE_ITEM\"; id: Item[\"id\"] }\n  | {\n      type: \"UPDATE_ITEM\";\n      id: Item[\"id\"];\n      payload: object;\n    }\n  | { type: \"EMPTY_CART\" }\n  | { type: \"CLEAR_CART_META\" }\n  | { type: \"SET_CART_META\"; payload: Metadata }\n  | { type: \"UPDATE_CART_META\"; payload: Metadata };\n\nexport const initialState: any = {\n  items: [],\n  isEmpty: true,\n  totalItems: 0,\n  totalUniqueItems: 0,\n  cartTotal: 0,\n  metadata: {},\n};\n\nconst CartContext = React.createContext<CartProviderState | undefined>(\n  initialState\n);\n\nexport const createCartIdentifier = (len = 12) =>\n  [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join(\"\");\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext);\n\n  if (!context) throw new Error(\"Expected to be wrapped in a CartProvider\");\n\n  return context;\n};\n\nfunction reducer(state: CartProviderState, action: Actions) {\n  switch (action.type) {\n    case \"SET_ITEMS\":\n      return generateCartState(state, action.payload);\n\n    case \"ADD_ITEM\": {\n      const items = [...state.items, action.payload];\n\n      return generateCartState(state, items);\n    }\n\n    case \"UPDATE_ITEM\": {\n      const items = state.items.map((item: Item) => {\n        if (item.id !== action.id) return item;\n\n        return {\n          ...item,\n          ...action.payload,\n        };\n      });\n\n      return generateCartState(state, items);\n    }\n\n    case \"REMOVE_ITEM\": {\n      const items = state.items.filter((i: Item) => i.id !== action.id);\n\n      return generateCartState(state, items);\n    }\n\n    case \"EMPTY_CART\":\n      return initialState;\n\n    case \"CLEAR_CART_META\":\n      return {\n        ...state,\n        metadata: {},\n      };\n\n    case \"SET_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...action.payload,\n        },\n      };\n\n    case \"UPDATE_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...state.metadata,\n          ...action.payload,\n        },\n      };\n\n    default:\n      throw new Error(\"No action specified\");\n  }\n}\n\nconst generateCartState = (state = initialState, items: Item[]) => {\n  const totalUniqueItems = calculateUniqueItems(items);\n  const isEmpty = totalUniqueItems === 0;\n\n  return {\n    ...initialState,\n    ...state,\n    items: calculateItemTotals(items),\n    totalItems: calculateTotalItems(items),\n    totalUniqueItems,\n    cartTotal: calculateTotal(items),\n    isEmpty,\n  };\n};\n\nconst calculateItemTotals = (items: Item[]) =>\n  items.map(item => ({\n    ...item,\n    itemTotal: item.price * item.quantity!,\n  }));\n\nconst calculateTotal = (items: Item[]) =>\n  items.reduce((total, item) => total + item.quantity! * item.price, 0);\n\nconst calculateTotalItems = (items: Item[]) =>\n  items.reduce((sum, item) => sum + item.quantity!, 0);\n\nconst calculateUniqueItems = (items: Item[]) => items.length;\n\nexport const CartProvider: React.FC<{\n  children?: React.ReactNode;\n  id?: string;\n  defaultItems?: Item[];\n  onSetItems?: (items: Item[]) => void;\n  onItemAdd?: (payload: Item) => void;\n  onItemUpdate?: (payload: object) => void;\n  onItemRemove?: (id: Item[\"id\"]) => void;\n  storage?: (\n    key: string,\n    initialValue: string\n  ) => [string, (value: Function | string) => void];\n  metadata?: Metadata;\n}> = ({\n  children,\n  id: cartId,\n  defaultItems = [],\n  onSetItems,\n  onItemAdd,\n  onItemUpdate,\n  onItemRemove,\n  storage = useLocalStorage,\n  metadata,\n}) => {\n  const id = cartId ? cartId : createCartIdentifier();\n\n  const [savedCart, saveCart] = storage(\n    cartId ? `react-use-cart-${id}` : `react-use-cart`,\n    JSON.stringify({\n      id,\n      ...initialState,\n      items: defaultItems,\n      metadata,\n    })\n  );\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(savedCart));\n  React.useEffect(() => {\n    saveCart(JSON.stringify(state));\n  }, [state, saveCart]);\n\n  const setItems = (items: Item[]) => {\n    dispatch({\n      type: \"SET_ITEMS\",\n      payload: items.map(item => ({\n        ...item,\n        quantity: item.quantity || 1,\n      })),\n    });\n\n    onSetItems && onSetItems(items);\n  };\n\n  const addItem = (item: Item, quantity = 1) => {\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\n    if (quantity <= 0) return;\n\n    const currentItem = state.items.find((i: Item) => i.id === item.id);\n\n    if (!currentItem && !item.hasOwnProperty(\"price\"))\n      throw new Error(\"You must pass a `price` for new items\");\n\n    if (!currentItem) {\n      const payload = { ...item, quantity };\n\n      dispatch({ type: \"ADD_ITEM\", payload });\n\n      onItemAdd && onItemAdd(payload);\n\n      return;\n    }\n\n    const payload = { ...item, quantity: currentItem.quantity + quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: item.id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItem = (id: Item[\"id\"], payload: object) => {\n    if (!id || !payload) {\n      return;\n    }\n\n    dispatch({ type: \"UPDATE_ITEM\", id, payload });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItemQuantity = (id: Item[\"id\"], quantity: number) => {\n    if (quantity <= 0) {\n      onItemRemove && onItemRemove(id);\n\n      dispatch({ type: \"REMOVE_ITEM\", id });\n\n      return;\n    }\n\n    const currentItem = state.items.find((item: Item) => item.id === id);\n\n    if (!currentItem) throw new Error(\"No such item to update\");\n\n    const payload = { ...currentItem, quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const removeItem = (id: Item[\"id\"]) => {\n    if (!id) return;\n\n    dispatch({ type: \"REMOVE_ITEM\", id });\n\n    onItemRemove && onItemRemove(id);\n  };\n\n  const emptyCart = () =>\n    dispatch({\n      type: \"EMPTY_CART\",\n    });\n\n  const getItem = (id: Item[\"id\"]) =>\n    state.items.find((i: Item) => i.id === id);\n\n  const inCart = (id: Item[\"id\"]) => state.items.some((i: Item) => i.id === id);\n\n  const clearCartMetadata = () => {\n    dispatch({\n      type: \"CLEAR_CART_META\",\n    });\n  };\n\n  const setCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"SET_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  const updateCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"UPDATE_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        ...state,\n        getItem,\n        inCart,\n        setItems,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        removeItem,\n        emptyCart,\n        clearCartMetadata,\n        setCartMetadata,\n        updateCartMetadata,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"names":["Router","React","Home","useLocalStorage","key","initialValue","item","window","localStorage","getItem","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","console","log","initialState","items","isEmpty","totalItems","totalUniqueItems","cartTotal","metadata","CartContext","useCart","context","Error","reducer","state","action","type","generateCartState","payload","map","id","filter","i","calculateUniqueItems","calculateItemTotals","calculateTotalItems","calculateTotal","itemTotal","price","quantity","reduce","total","sum","length","CartProvider","len","children","cartId","defaultItems","onSetItems","onItemAdd","onItemUpdate","onItemRemove","storage","Array","Math","random","toString","join","JSON","stringify","savedCart","saveCart","parse","dispatch","Provider","find","inCart","some","setItems","addItem","currentItem","hasOwnProperty","updateItem","updateItemQuantity","removeItem","emptyCart","clearCartMetadata","setCartMetadata","updateCartMetadata"],"sourceRoot":""}